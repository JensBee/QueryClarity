/*
 * Copyright (C) 2014 Jens Bertram <code@jens-bertram.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.unihildesheim.iw.lucene.query;

import de.unihildesheim.iw.lucene.LuceneDefaults;
import de.unihildesheim.iw.util.StringUtils;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.queryparser.flexible.standard.QueryParserUtil;
import org.apache.lucene.search.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Set;

/**
 * Simple term query using a {@link org.apache.lucene.queryparser.classic
 * .MultiFieldQueryParser} under the hood.
 *
 * @author Jens Bertram
 */
public final class SimpleTermsQuery
    implements TermsProvidingQuery {

  /**
   * Default boolean operator to use for concatenating terms.
   */
  public static final QueryParser.Operator DEFAULT_OPERATOR
      = QueryParser.Operator.OR;
  /**
   * Logger instance for this class.
   */
  private static final Logger LOG = LoggerFactory.getLogger(
      SimpleTermsQuery.class);
  /**
   * Final query generated by {@link MultiFieldQueryParser}.
   */
  private final Query queryObj;
  /**
   * Collection of all terms from the query (stop-words removed).
   */
  private final List<String> queryTerms;

  /**
   * Create a new simple term query.
   *
   * @param analyzer Analyzer for parsing the query
   * @param query Query string
   * @param operator Default boolean operator to use
   * @param fields Document fields to include
   * @throws ParseException Thrown if there were errors parsing the query
   * string
   */
  public SimpleTermsQuery(final Analyzer analyzer, final String query,
      final QueryParser.Operator operator,
      final Set<String> fields
  )
      throws ParseException {
    if (Objects.requireNonNull(fields, "Fields were null.").isEmpty()) {
      throw new IllegalArgumentException("Empty fields list.");
    }
    if (Objects.requireNonNull(query, "Query was null.").trim().isEmpty()) {
      throw new IllegalArgumentException("Empty query.");
    }

    final QueryParser qParser = new MultiFieldQueryParser(
        LuceneDefaults.VERSION, fields.toArray(new String[fields.size()]),
        analyzer);

    // generate a local list of query terms using the provided Analyzer
    this.queryTerms = tokenizeQueryString(query, analyzer);

    final String stoppedQuery = StringUtils.join(this.queryTerms, " ");

    if (StringUtils.isStrippedEmpty(stoppedQuery)) {
      throw new ParseException("Stopped query is empty.");
    }

    LOG.debug("STQ userQuery={}", query);
    LOG.debug("STQ analyzer={} tokens({})={}", analyzer.getClass()
        .getSimpleName(), this.queryTerms.size(), this.queryTerms);
    LOG.debug("STQ tokens={} operator={} fields={}", this.queryTerms.size(),
        operator, fields);

    qParser.setDefaultOperator(operator);
    this.queryObj = qParser.parse(QueryParserUtil.escape(query));
    LOG.debug("STQ Q={}", this.queryObj.toString());
  }

  /**
   * Tokenizes a query string using Lucenes analyzer. This also removes
   * stopwords from the query string.
   *
   * @param query Query string to tokenize
   * @param analyzer Analyzer to use
   * @return Tokenized query string with stop-words removed
   */
  private static List<String> tokenizeQueryString(final String query,
      final Analyzer analyzer) {
    @SuppressWarnings("CollectionWithoutInitialCapacity")
    final List<String> result = new ArrayList<>();
    try (TokenStream stream = analyzer.tokenStream(null,
        new StringReader(query))) {
      stream.reset();
      while (stream.incrementToken()) {
        result.add(stream.getAttribute(CharTermAttribute.class).toString());
      }
    } catch (final IOException e) {
      // not thrown b/c we're using a string reader
    }
    return result;
  }

  /**
   * Get the list of terms from the original query. Stop-words are removed.
   *
   * @return List of query terms with stop-words removed
   */
  @Override
  public Collection<String> getQueryTerms() {
    return Collections.unmodifiableCollection(this.queryTerms);
  }

  /**
   * Get the Query object.
   *
   * @return Query object
   */
  @Override
  public Query getQueryObj() {
    return this.queryObj;
  }
}
