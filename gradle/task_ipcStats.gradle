/*
 * Copyright (C) 2015 Jens Bertram (code@jens-bertram.net)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Dump IPC-Code Statistics
TaskConf.IpcStats = [
        /**
         * Database file name prefix.
         */
        dbPrefix  : 'ipcStats',
        /**
         * Task name prefix
         */
        taskPrefix: 'ipcStats']
/**
 * Create a target database file name.
 * @param lang Language
 */
TaskConf.IpcStats.createDBFileName = { lang ->
    return "${TaskConf.IpcStats.dbPrefix}-${lang}.sqlite"
}

/*******************************************************************************
 * Tasks
 */
tasks.addRule("Pattern (${TaskConf.IpcStats.taskPrefix}): " +
        'Calculate IPC-Code Statistics.\n' +
        "  * ${TaskConf.IpcStats.taskPrefix}: " +
        'all languages, IPC\n' +
        "  * ${TaskConf.IpcStats.taskPrefix}-<LANGUAGE>: " +
        'only <LANGUAGE>, all IPC') {
    String taskName ->
        if (taskName.startsWith(TaskConf.IpcStats.taskPrefix)) {
            task(taskName) {
                /**
                 * Runtime parameters derived from task name.
                 */
                ext.params = parseDataSuffix(
                        taskName - TaskConf.IpcStats.taskPrefix)
                /**
                 * If true, this task will not execute any Java task.
                 */
                ext.noAction = params.language == null
                /**
                 * Default arguments for the main class.
                 */
                ext.defaultCmdArgs = [
                        '-grpsep', conf.ipc.grpSeparator,
                        '-zeropad']

                if (!noAction) {
                    /**
                     * Target file with ipc statistics.
                     */
                    ext.target = [
                            fileName: TaskConf.IpcStats.createDBFileName(
                                    params.language),
                            path    : conf.targets.ipcDump]
                    ext.target.file = file(new File(
                            "${ext.target.path}/${ext.target.fileName}"))
                }

                dependsOn {
                    def depTasks = ['prepareOutput']

                    if (params.language == null) {
                        for (lang in conf.scoring.languages) {
                            // avoid circular dependency
                            def depTask = TaskConf.IpcStats.taskPrefix +
                                    '-' + lang
                            if (name != depTask) {
                                depTasks.add(tasks[depTask])
                            }
                        }
                    }

                    if (params.language != null) {
                        depTasks.add("buildIndex-${params.language}")
                    }

                    depTasks
                }

                outputs.files {
                    if (noAction) {
                        return;
                    }
                    target.file
                }

                doLast {
                    if (noAction) {
                        return;
                    }

                    /**
                     * Main class to execute from the generated tasks.
                     */
                    ext.mainClass = conf.java.package + 'cli.DumpIPCStats'
                    /**
                     * Command-line arguments for the main class.
                     */
                    ext.cmdArgs = defaultCmdArgs + [
                            '-out', target.file.toString(),
                            '-idx', conf.targets.index + params.language]

                    // delete target DB, if present
                    Validate.deleteIfPresent(target.file)

                    // create target directory
                    new File(ext.target.path.toString()).mkdirs()

                    // run java
                    javaexec {
                        args = cmdArgs
                        classpath = conf.java.classPath
                        main = mainClass
                    }

                    // check, if output is present
                    Validate.requireFile(target.file)
                }
            }
        }
}
