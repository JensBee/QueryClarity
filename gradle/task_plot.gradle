/*
 * Copyright (C) 2015 Jens Bertram (code@jens-bertram.net)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Create plots using R
TaskConf.Plots = [
        /**
         * Task name prefix
         */
        taskPrefix: 'plot',
        /**
         * Mapping of parameter to plot type.
         */
        plotNames : [
                ipcStats: PlotType.IPC_STATS
        ]
]

enum PlotType {
    ALL, NONE, IPC_STATS;
}

def parsePlotParams(dataString) {
    if (dataString.startsWith('-')) {
        dataString = dataString - '-'
    }

    def params
    if (dataString.length() > 0) {
        params = dataString.split('-').toList()
    } else {
        params = []
    }
    params
}

/*******************************************************************************
 * Tasks
 */
tasks.addRule("Pattern (${TaskConf.Plots.taskPrefix}): " +
        'Create plots using R.\n' +
        "  * ${TaskConf.Plots.taskPrefix}: " +
        'Create all plots\n' +
        "  * ${TaskConf.Plots.taskPrefix}-ipcStats: " +
        'Plot IPC statistics') {
    String taskName ->
        if (taskName.startsWith(TaskConf.Plots.taskPrefix)) {
            task(taskName) {
                /**
                 * Task arguments.
                 */
                ext.args = parsePlotParams(taskName - TaskConf.Plots.taskPrefix)
                /**
                 * Decide, what to plot.
                 */
                ext.action = PlotType.ALL
                if (!args.empty) {
                    def plotParam = args[0].toString()
                    def actionDefined = false

                    for (s in TaskConf.Plots.plotNames) {
                        println("${s.key} == ${plotParam}");
                        if (s.key.toString().equalsIgnoreCase(plotParam)) {
                            action = s.value
                            actionDefined = true
                            break
                        }
                    }

                    if (!actionDefined) {
                        throw new IllegalArgumentException("Unknown: ${plotParam}");
                    }
                }

                dependsOn {
                    def depTasks = []

                    switch (action) {
                        case PlotType.ALL:
                            for (s in TaskConf.Plots.plotNames) {
                                depTasks.add(tasks[TaskConf.Plots.taskPrefix +
                                        '-' + s.key])
                            }
                            break
                        case PlotType.IPC_STATS:
                            depTasks.add(tasks[TaskConf.IpcStats.taskPrefix])
                            break;
                        default:
                            break;
                    }

                    depTasks
                }

                outputs.files {
                    if (action == PlotType.ALL) {
                        return;
                    }

                    def t = conf.targets.plots + '/'
                    switch (action) {
                        case PlotType.IPC_STATS:
                            return files(
                                    t + 'ipcStats-section_dist.pdf',
                                    t + 'ipcStats-section_divcount.pdf')
                    }
                }

                doLast {
                    if (action == PlotType.ALL) {
                        return;
                    }

                    def cmdArgs = []

                    switch (action) {
                        case PlotType.IPC_STATS:
                            cmdArgs = [
                                    "${conf.r.scriptPath}/plotIPCStats.r",
                                    '-s', conf.targets.ipcDump,
                                    '-t', conf.targets.plots]
                            break;
                    }

                    if (cmdArgs.isEmpty()) {
                        throw new IllegalStateException(
                                "No Rscript parameters defined.")
                    }

                    // create target directory
                    new File(conf.targets.plots.toString()).mkdirs()

                    exec {
                        executable 'Rscript'
                        args cmdArgs
                    }
                }
            }
        }
}
