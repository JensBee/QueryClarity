/*
 * Copyright (C) 2015 Jens Bertram (code@jens-bertram.net)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*******************************************************************************
 * General configuration.
 */
/**
 * Location to store any working-data.
 */
ext.workingDirectory = new File('data')

ext.log = [
        warn: '[WARN] ',
        info: '[INFO] ',
        stat: '[STAT] ',
        err : '[ERROR] ',
]

ext.conf = [
        // GNU R configuration
        r        : [scriptPath: 'rscripts'],

        // IPC-related data
        ipc      : [
                /**
                 * List of all known IPC-section identifiers.
                 */
                sections    : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],
                /**
                 * Char to use for separating main- and sub-group.
                 */
                grpSeparator: '-'
        ],

        // Java runtime configuration
        java     : [
                //Default Java package
                package  : 'de.unihildesheim.iw.',
                // Java ClassPath to use
                classPath: files('target/QueryClarity.jar')
        ],

        // Scoring configuration
        scoring  : [
                /**
                 * Languages available for scoring.
                 */
                languages: ['de', 'en', 'fr'],
                /**
                 * Lucene fields available for scoring.
                 */
                fields   : ['claims', 'detd']
        ],

        // Stopwords configuration
        stopwords: [
                // Location of stopword files
                pathPattern: new File('stop/stop/').absolutePath,
                // Default stopwords file format
                format     : 'snowball'
        ],

        // Target directories
        targets  : [
                index: '/data/clef/Clarity/work/fiz/index/'
        ]
]

/*******************************************************************************
 * Internal tasks.
 */
/**
 * Gradle wrapper task.
 */
task('wrapper', type: Wrapper) {
    description 'Create gradle wrapper for distribution.'
    gradleVersion = '2.3'
}

/**
 * Prepare the output directory.
 */
task('prepareOutput') {
    workingDirectory.mkdirs()
}

//apply from: 'gradle/task_score.gradle'

/*******************************************************************************
 * Index building.
 */
for (lang in conf.scoring.languages) {
    task("buildIndex-${lang}") {
        /**
         * Arguments for the main class.
         */
        def cmdArgs = [
                '-data', conf.targets.index,
                '-only-lang', lang,
                '-stop', conf.stopwords.pathPattern,
                '-stop-format', conf.stopwords.format]

        /**
         * Main class to execute from the generated tasks.
         */
        def mainClass = conf.java.package + 'fiz.cli.BuildIndex'

        description "Create index. lang=${lang}."
        dependsOn prepareOutput
        outputs.files conf.targets.index + lang + '/'

        doLast {
            logger.info(log.stat + "Building index for language=${lang}")

            javaexec {
                args = cmdArgs
                classpath = conf.java.classPath
                main = mainClass
            }
        }
    }
}

task('buildIndex') {
    def depTasks = []
    for (lang in conf.scoring.languages) {
        depTasks.add(tasks["buildIndex-${lang}"])
    }

    description 'Build Lucene indices for all languages.'
    dependsOn depTasks
}

/*******************************************************************************
 * Term dumping.
 */
task('termDump') {
    description 'Dump term-frequency data for all languages.'

    /**
     * Default arguments for the main class.
     */
    ext.defaultCmdArgs = [
            '-grpsep', conf.ipc.grpSeparator,
            '-stop', conf.stopwords.pathPattern,
            '-stop-format', conf.stopwords.format,
            '-threshold', 0d,
            '-zeropad']
    /**
     * Output file pattern.
     */
    ext.filePattern = { lang ->
        return "${workingDirectory.absolutePath}/termDump-${lang}.sqlite"
    }

    dependsOn {
        def depTasks = ['prepareOutput']
        for (lang in conf.scoring.languages) {
            depTasks.add("buildIndex-${lang}")
        }
        depTasks
    }

    outputs.files {
        def outFiles = []
        for (lang in conf.scoring.languages) {
            outFiles.add(filePattern(lang))
        }
        outFiles
    }

    doLast {
        /**
         * Main class to execute.
         */
        ext.mainClass = conf.java.package + 'cli.DumpTermData'
        ext.cmdArgs = []

        for (lang in conf.scoring.languages) {
            /**
             * Command-line arguments for the main class.
             */
            cmdArgs = defaultCmdArgs + [
                    '-idx', conf.targets.index + lang,
                    '-lang', lang,
                    '-dbfile', filePattern(lang)]

            // check, if target already exists
            if (file(filePattern(lang)).exists()) {
                logger.warn(log.warn +
                        "TermDump for language '${lang}' exists. " +
                        "Skipping language=${lang}")
            } else {
                // dump for language + field
                for (field in conf.scoring.fields) {
                    logger.info(log.stat + "Dumping terms for " +
                            "language=${lang} field=${field}")
                    javaexec {
                        args = cmdArgs + ['-field', field]
                        classpath = conf.java.classPath
                        main = mainClass
                    }

                    // dump for language + field + ipc
                    for (ipcSec in conf.ipc.sections) {
                        logger.info(log.stat + "Dumping terms for " +
                                "language=${lang} field=${field} ipc=${ipcSec}")
                        javaexec {
                            args = cmdArgs + [
                                    '-field', field,
                                    '-ipc', ipcSec
                            ]
                            classpath = conf.java.classPath
                            main = mainClass
                        }
                    }
                }
            }
        }
    }
}

/*******************************************************************************
 * Term dump sampling.
 */
task('termDumpSample') {
    description 'Extract sample terms from term-frequency dumps.'

    /**
     * Default arguments for the main class.
     */
    ext.defaultCmdArgs = [
            '-threshold', 0, //0.01,
            '-bins', 6,
            '-binsize', 50,
            '-picks', '1 3 5',
            '-grpsep', conf.ipc.grpSeparator]
    /**
     * Output file pattern.
     */
    ext.tgtTimestamp = new Date().format("yyyy-MM-dd_HH:mm:ss")
    ext.tgtDir = "${workingDirectory.absolutePath}/termDumpSamples"
    ext.tgtFilePattern = { lang ->
        return "${tgtDir}/termDumpSample-${lang}-${tgtTimestamp}.sqlite"
    }
    /**
     * Source file pattern.
     */
    ext.srcFilePattern = { lang ->
        return "${workingDirectory.absolutePath}/termDump-${lang}.sqlite"
    }

    dependsOn 'termDump'

    // task will always run
    outputs.upToDateWhen {
        return false
    }

    doLast {
        // create target
        file(tgtDir).mkdirs()

        /**
         * Main class to execute.
         */
        ext.mainClass = conf.java.package + 'cli.SampleTerms'
        ext.cmdArgs = []

        for (lang in conf.scoring.languages) {
            /**
             * Command-line arguments for the main class.
             */
            cmdArgs = defaultCmdArgs + [
                    '-dumpdb', srcFilePattern(lang),
                    '-scoredb', tgtFilePattern(lang),
                    '-lang', lang]

            // sample for language + field
            for (field in conf.scoring.fields) {
                logger.info(log.stat + "Sampling terms for " +
                        "language=${lang} field=${field}")
                javaexec {
                    args = cmdArgs + ['-field', field]
                    classpath = conf.java.classPath
                    main = mainClass
                }

                // sample for language + field + ipc
                for (ipcSec in conf.ipc.sections) {
                    logger.info(log.stat + "Sampling terms for " +
                            "language=${lang} field=${field} ipc=${ipcSec}")
                    javaexec {
                        args = cmdArgs + [
                                '-field', field,
                                '-ipc', ipcSec
                        ]
                        classpath = conf.java.classPath
                        main = mainClass
                    }
                }
            }
        }
    }
}

/*******************************************************************************
 * Term dump sample sentence extraction.
 */
task('termDumpSampleSentences') {
    description 'Add sentences for all terms sampled from ' +
            'term-frequency dumps.'

    /**
     * Output file pattern.
     */
    ext.tgtDir = "${workingDirectory.absolutePath}/termDumpSampleSentences"
    ext.tgtFilePattern = { file -> return "${tgtDir}/${file}" }
    /**
     * Source file pattern.
     */
    ext.srcDir = "${workingDirectory.absolutePath}/termDumpSamples"
    ext.srcFiles = { lang ->
        return fileTree(
                dir: srcDir,
                include: "**/termDumpSample-${lang}*.sqlite")
    }

    // task will always run
    outputs.upToDateWhen {
        return false
    }

    doLast {
        /**
         * Main class to execute.
         */
        ext.mainClass = conf.java.package +
                'fiz.cli.ScoringTermSentenceExtractor'
        ext.cmdArgs = []

        logger.info(log.stat +
                "Getting sentences for term-dumps in '${srcDir}'")

        for (lang in conf.scoring.languages) {
            /**
             * Command-line arguments for the main class.
             */
            cmdArgs = [
                    '-idx', conf.targets.index + lang,
                    '-lang', lang]

            // get all termDump files for the current language
            srcFiles(lang).visit { entry ->
                logger.info(log.stat +
                        "Getting sentences for '${entry.name}'")

                ext.targetFile = tgtFilePattern(entry.name)

                // check, if target already exists
                if (file(targetFile).exists()) {
                    logger.warn(log.warn + 'Sentences for dump \'' +
                            targetFile + ' exists. Skipping file.')
                } else {
                    // copy file
                    copy {
                        from entry.file
                        into tgtDir
                        include entry.name
                    }

                    // run java
                    javaexec {
                        args = cmdArgs + ['-scoredb', targetFile]
                        classpath = conf.java.classPath
                        main = mainClass
                    }
                }
            }
        }
    }
}

/*******************************************************************************
 * Collect IPC-Code statistics.
 */
task('ipcStats') {
    description 'Collect IPC-code related statistics.'

    /**
     * Default arguments for the main class.
     */
    ext.defaultCmdArgs = [
            '-grpsep', conf.ipc.grpSeparator,
            '-zeropad']

    /**
     * Output file pattern.
     */
    ext.filePattern = { lang ->
        return "${workingDirectory.absolutePath}/ipcStats-${lang}.sqlite"
    }

    dependsOn {
        def depTasks = ['prepareOutput']
        for (lang in conf.scoring.languages) {
            depTasks.add("buildIndex-${lang}")
        }
        depTasks
    }

    outputs.files {
        def outFiles = []
        for (lang in conf.scoring.languages) {
            outFiles.add(filePattern(lang))
        }
        outFiles
    }

    doLast {
        /**
         * Main class to execute.
         */
        ext.mainClass = conf.java.package + 'cli.DumpIPCStats'

        for (lang in conf.scoring.languages) {
            /**
             * Command-line arguments for the main class.
             */
            ext.cmdArgs = defaultCmdArgs + [
                    '-out', filePattern(lang),
                    '-idx', conf.targets.index + lang]

            // check, if target already exists
            if (file(filePattern(lang)).exists()) {
                logger.warn(log.warn +
                        "IPC-statistics for language '${lang}' exists. " +
                        "Skipping language=${lang}")
            } else {
                // run java
                javaexec {
                    args = cmdArgs
                    classpath = conf.java.classPath
                    main = mainClass
                }
            }
        }
    }
}

/*******************************************************************************
 * Plot graphs.
 */
task('plot') {
    description 'Create various plots using R.'

    /**
     * Output directory.
     */
    ext.targetDir = "${workingDirectory.absolutePath}/plots"

    /**
     * Default arguments for running R.
     */
    ext.defaultCmdArgs = ['-t', targetDir]

    dependsOn 'ipcStats'

    outputs.files {
        def t = targetDir + '/'
        return files(
                // IPC-stats
                t + 'ipcStats-section_dist.pdf',
                t + 'ipcStats-section_divcount.pdf'
        )
    }

    doLast {
        // create target directory
        file(targetDir).mkdirs()

        // IPC-stats
        ext.cmdArgs = [
                "${conf.r.scriptPath}/plotIPCStats.r",
                '-s', workingDirectory.absolutePath] + defaultCmdArgs

        exec {
            executable 'Rscript'
            args cmdArgs
        }
    }
}

/*******************************************************************************
 * Clarity scoring.
 */
task('score') {
    description 'Calculate Clarity scores.'

    /**
     * Output file pattern.
     */
    ext.tgtDir = "${workingDirectory.absolutePath}/scoring"
    ext.tgtFilePattern = { file -> return "${tgtDir}/${file}" }
    /**
     * Source file pattern.
     */
    ext.srcDir = "${workingDirectory.absolutePath}/termDumpSampleSentences"
    ext.srcFiles = { lang ->
        return fileTree(
                dir: srcDir,
                include: "**/termDumpSample-${lang}*.sqlite")
    }

    doLast {
        /**
         * Main class to execute from the generated tasks.
         */
        ext.mainClass = conf.java.package + 'fiz.cli.Score'
        ext.cmdArgs = []

        logger.info(log.stat +
                "Scorng terms & sentences for dumps in '${srcDir}'")

        for (lang in conf.scoring.languages) {
            /**
             * Command-line arguments for the main class.
             */
            cmdArgs = [
                    '-idx', conf.targets.index + lang,
                    '-lang', lang,
                    '-grpsep', conf.ipc.grpSeparator,
                    '-zeropad']

            // get all termDump files for the current language
            srcFiles(lang).visit { entry ->
                logger.info(log.stat +
                        "Getting terms & sentences for '${entry.name}'")

                ext.targetFile = tgtFilePattern(entry.name)
                cmdArgs += ['-scoredb', targetFile]

                // check, if target already exists
                if (file(targetFile).exists()) {
                    logger.warn(log.warn + 'Scoring for dump \'' +
                            targetFile + ' exists. Skipping file.')
                } else {
                    // copy file
                    copy {
                        from entry.file
                        into tgtDir
                        include entry.name
                    }

                    // score for language + field
                    for (field in conf.scoring.fields) {
                        logger.info(log.stat + "Scoring language=${lang} " +
                                "field=${field}")

                        // run java
                        javaexec {
                            args = cmdArgs + ['-fields', field]
                            classpath = conf.java.classPath
                            main = mainClass
                        }

                        // score for language + field + ipc
                        for (ipcSec in conf.ipc.sections) {
                            logger.info(log.stat + "Scoring language=${lang} " +
                                    "field=${field} ipc=${ipcSec}")

                            // run java
                            javaexec {
                                args = cmdArgs + [
                                        '-fields', field,
                                        '-ipc', ipcSec
                                ]
                                classpath = conf.java.classPath
                                main = mainClass
                            }
                        }
                    }
                }
            }
        }
    }
}