/*******************************************************************************
 * General configuration.
 */
/**
 * Location to store any working-data.
 */
def workingDirectory = new File('data')

/**
 * Java runtime configuration.
 */
def confJava = [
        /**
         * Default Java package.
         */
        package  : 'de.unihildesheim.iw.',
        /**
         * Java ClassPath to use.
         */
        classPath: files('target/QueryClarity.jar')
]

/**
 * Lucene configuration.
 */
def confLucene = [
        /**
         * Location of Lucene indices.
         */
        indexPath: '/data/clef/Clarity/work/fiz/index/'
]

/**
 * Stopwords configuration.
 */
def confStopwords = [
        /**
         * Location of stopword files.
         */
        pathPattern: new File('stop/stop/').absolutePath,
        /**
         * Default stopwords file format.
         */
        format     : 'snowball'
]

/**
 * Scoring configuration.
 */
def confScoring = [
        /**
         * Languages available for scoring.
         */
        languages: ['de', 'en', 'fr'],
        /**
         * Lucene fields available for scoring.
         */
        fields   : ['claims', 'detd']
]

def confIPC = [
        /**
         * List of all known IPC-section identifiers.
         */
        sections    : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],
        /**
         * Char to use for separating main- and sub-group.
         */
        grpSeparator: '-'
]

/*******************************************************************************
 * Internal configuration.
 */
/**
 * Pre-defined task group-names.
 */
def groupNames = [
        intern         : "Internal",
        termDump       : "Term-frequency data dumps: " +
                "Base data",
        termDumpIpc    : "Term frequency data dumps: " +
                "Filtered by IPC-section",
        extractTerms   : "Sample terms from term-frequency data dumps: " +
                "Base data",
        extractTermsIpc: "Sample terms from term-frequency data dumps: " +
                "Filtered by IPC-section"]

/*******************************************************************************
 * Internal helper methods.
 */
class TermDump {
    /**
     * Database file name prefix.
     */
    static dbPrefix = 'termDump'
    /**
     * Task name prefix
     */
    static taskPrefix = 'dumpTermFreqs'

    /**
     * Create a task name.
     * @param lang Language
     * @param field Lucene field
     * @param ipc IPC-Code (optional)
     * @return Task-name String
     */
    static createTaskName(lang, field, ipc) {
        if (lang == null) {
            return taskPrefix;
        } else {
            if (field == null) {
                return "${taskPrefix}-${lang}"
            } else {
                if (ipc == null) {
                    return "${taskPrefix}-${lang}_${field}"
                } else {
                    return "${taskPrefix}-${lang}_${field}" +
                            "-ipc_${ipc.toLowerCase()}"
                }
            }
        }
    }

    /**
     * Create a target database file name.
     * @param dir Target directory
     * @param lang Language
     * @param field Lucene field
     * @param ipc IPC-Code (optional)
     * @return Filename String
     */
    static createDBFileName(dir, lang, field, ipc) {
        if (ipc == null)
            return "${dir}/${dbPrefix}-${lang}_${field}.sqlite"
        else
            return "${dir}/${dbPrefix}-${lang}_${field}" +
                    "-ipc_${ipc.toLowerCase()}.sqlite"
    }
}

class ExtractTerms {
    /**
     * Database file name prefix.
     */
    static dbPrefix = 'termDumpSample'
    /**
     * Task name prefix
     */
    static taskPrefix = 'extractTermFreqSamples'

    /**
     * Create a task name.
     * @param lang Language
     * @param field Lucene field
     * @param ipc IPC-Code (optional)
     * @return Task-name String
     */
    static createTaskName(lang, field, ipc) {
        if (lang == null) {
            return taskPrefix;
        } else {
            if (field == null) {
                return "${taskPrefix}-${lang}"
            } else {
                if (ipc == null) {
                    return "${taskPrefix}-${lang}_${field}"
                } else {
                    return "${taskPrefix}-${lang}_${field}" +
                            "-ipc_${ipc.toLowerCase()}"
                }
            }
        }
    }

    /**
     * Create a target database file name.
     * @param dir Target directory
     * @param lang Language
     * @param field Lucene field
     * @param ipc IPC-Code (optional)
     * @return Filename String
     */
    static createDBFileName(dir, lang, field, ipc) {
        if (ipc == null)
            return "${dir}/${dbPrefix}-${lang}_${field}.sqlite"
        else
            return "${dir}/${dbPrefix}-${lang}_${field}" +
                    "-ipc_${ipc.toLowerCase()}.sqlite"
    }
}

/*******************************************************************************
 * Internal tasks.
 */
/**
 * Gradle wrapper task.
 */
task('wrapper', type: Wrapper) {
    description "Create gradle wrapper for distribution."
    group groupNames['intern']
    gradleVersion = '2.3'
}

/**
 * Prepare the output directory.
 */
task('prepareOutput') {
    workingDirectory.mkdirs()
}

/*******************************************************************************
 * Term-frequency dump tasks.
 */
/**
 * Dynamic generate term-frequency dump tasks.
 * 'dumpTerms-de' will dump all terms for the fields 'claims' & 'detd' for the
 *      language 'de' (german).
 * 'dumpTerms-de-claims' will dump all terms for the field 'claims' for the
 *      language 'de' (german).
 */
for (lang in confScoring['languages']) {
    /**
     * Default arguments for the main class.
     */
    def defaultArgs = [
            '-grpsep', confIPC['grpSeparator'],
            '-idx', confLucene['indexPath'] + lang.toUpperCase(),
            '-lang', lang,
            '-stop', confStopwords['pathPattern'],
            '-stop-format', confStopwords['format'],
            '-threshold', 0d,
            '-zeropad']

    /**
     * Main class to execute from the generated tasks.
     */
    def mainClass = confJava['package'] + 'cli.DumpTermData'

    /**
     * Create tasks for each language & field combination.
     */
    for (field in confScoring['fields']) {
        /**
         * Dump term-frequencies for current language & field.
         */
        task(TermDump.createTaskName(lang, field, null)) {
            /**
             * Target file that will be created
             */
            def target = new File(TermDump.createDBFileName(
                    workingDirectory.absolutePath, lang, field, null))
            def infoStr = "TermFreq dump. field=${field} lang=${lang}."

            description infoStr
            logger.info("${infoStr} target=${target}")
            group groupNames['termDump']
            dependsOn 'prepareOutput'
            outputs.files target

            doLast {
                if (target.exists()) {
                    logger.info("Delete {} - since it's out of date.")
                    //target.remove()
                }

                javaexec {
                    args = defaultArgs + [
                            '-dbfile', target.toString(),
                            '-field', field]
                    classpath = confJava['classPath']
                    main = mainClass
                }
            }
        }

        /**
         * Dynamic generate term-dump tasks for all known IPC-Sections.
         */
        for (ipcSec in confIPC['sections']) {
            /**
             * Dump term-frequencies for current language, field & IPC-section.
             */
            task(TermDump.createTaskName(lang, field, ipcSec)) {
                /**
                 * Target file that will be created
                 */
                def target = new File(TermDump.createDBFileName(
                        workingDirectory.absolutePath,
                        lang, field, ipcSec.toLowerCase()))
                def infoStr = "TermFreq dump. " +
                        "field=${field} lang=${lang} ipc=${ipcSec}."

                description infoStr
                logger.info("${infoStr} target=${target}")
                group groupNames['termDumpIpc']
                dependsOn 'prepareOutput'
                outputs.files target

                doLast {
                    if (target.exists()) {
                        logger.info("Delete {} - since it's out of date.")
                        //target.remove()
                    }

                    javaexec {
                        args = defaultArgs + [
                                '-dbfile', target.toString(),
                                '-field', field,
                                '-ipc', ipcSec]
                        classpath = confJava['classPath']
                        main = mainClass
                    }
                }
            }
        }

        /**
         * Catch-all task to generate all IPC-class related dumps for the
         * current language & field.
         */
        task(TermDump.createTaskName(lang, field, null) + '-ipc') {
            def depTasks = []
            for (ipcSec in confIPC['sections']) {
                depTasks.add(tasks[
                        TermDump.createTaskName(lang, field, ipcSec)])
            }
            dependsOn depTasks
            group groupNames['termDumpIpc']
            description "Batch TermFreq dump. " +
                    "field=${field} lang=${lang} ipc=*."
        }
    }

    /**
     * Generate catch-all task for each language that will run tasks for each
     * field of that language.
     */
    task(TermDump.createTaskName(lang, null, null)) {
        def depTasks = []
        for (field in confScoring['fields']) {
            depTasks.add(tasks[
                    TermDump.createTaskName(lang, field, null)])
        }
        dependsOn depTasks
        group groupNames['termDump']
        description "Batch TermFreq dump. field=* lang=${lang}."
    }

    /**
     * Generate catch-all task for each language that will run tasks for each
     * field of that language using an IPC-section filter.
     */
    task(TermDump.createTaskName(lang, null, null) + "-ipc") {
        def depTasks = []
        for (field in confScoring['fields']) {
            for (ipcSec in confIPC['sections']) {
                depTasks.add(tasks[
                        TermDump.createTaskName(lang, field, ipcSec)])
            }
        }
        dependsOn depTasks
        group groupNames['termDumpIpc']
        description "Batch TermFreq dump. field=* lang=${lang} ipc=*."
    }
}

/**
 * Catch-all task that will create tern-dumps for each language and field.
 */
task(TermDump.createTaskName(null, null, null)) {
    def depTasks = []
    for (lang in confScoring['languages']) {
        depTasks.add(tasks[
                TermDump.createTaskName(lang, null, null)])
    }

    description "Batch TermFreq dump. field=* lang=*."
    dependsOn depTasks
    group groupNames['termDump']
}

/**
 * Catch-all task that will create tern-dumps for each language, field and
 * IPC-section.
 */
task(TermDump.createTaskName(null, null, null) + '-ipc') {
    def depTasks = []
    for (lang in confScoring['languages']) {
        depTasks.add(tasks[
                TermDump.createTaskName(lang, null, null) + '-ipc'])
    }

    description "Batch TermFreq dump. field=* lang=* ipc=*."
    dependsOn depTasks
    group groupNames['termDumpIpc']
}

/*******************************************************************************
 * Term-frequency dump sample extraction tasks.
 */
for (lang in confScoring['languages']) {
    /**
     * Default arguments for the main class.
     */
    def defaultArgs = [
            '-threshold', 0.01,
            '-bins', 5,
            '-binsize', 50,
            '-picks', '1,3,5',
            '-grpsep', confIPC['grpSeparator']]

    /**
     * Main class to execute from the generated tasks.
     */
    def mainClass = confJava['package'] + 'cli.ExtractTerms'

    /**
     * Create tasks for each language & field combination.
     */
    for (field in confScoring['fields']) {
        /**
         * Dump term-frequencies for current language & field.
         */
        task(ExtractTerms.createTaskName(lang, field, null)) {
            /**
             * Target file that will be created
             */
            def target = new File(ExtractTerms.createDBFileName(
                    workingDirectory.absolutePath, lang, field, null))
            def source = TermDump.createDBFileName(
                    workingDirectory.absolutePath, lang, field, null)
            def infoStr = "Sample from TermFreq dump. " +
                    "field=${field} lang=${lang}"

            description infoStr
            logger.info("${infoStr} source=${source} target=${target}")
            group groupNames['extractTerms']
            dependsOn 'prepareOutput',
                    TermDump.createTaskName(lang, field, null)
            outputs.files target

            doLast {
                if (target.exists()) {
                    logger.info("Delete {} - since it's out of date.")
                    //target.delete()
                }
                javaexec {
                    args = defaultArgs + [
                            '-dbSource', source,
                            '-dbTarget', target,
                            '-field', field]
                    classpath = confJava['classPath']
                    main = mainClass
                }
            }
        }

        /**
         * Dynamic generate term-dump tasks for all known IPC-Sections.
         */
        for (ipcSec in confIPC['sections']) {
            /**
             * Dump term-frequencies for current language, field & IPC-section.
             */
            task(ExtractTerms.createTaskName(lang, field, ipcSec)) {
                /**
                 * Target file that will be created
                 */
                def target = ExtractTerms.createDBFileName(
                        workingDirectory.absolutePath,
                        lang, field, ipcSec.toLowerCase())
                def source = TermDump.createDBFileName(
                        workingDirectory.absolutePath, lang, field, ipcSec)
                def infoStr = "Sample from TermFreq dump. " +
                        "field=${field} lang=${lang} ipc=${ipcSec}."

                description infoStr
                logger.info("${infoStr} target=${target}")
                group groupNames['extractTermsIpc']
                dependsOn 'prepareOutput',
                        TermDump.createTaskName(lang, field, ipcSec)
                outputs.files target

                doLast {
                    if (target.exists()) {
                        logger.info("Delete {} - since it's out of date.")
                        //target.delete()
                    }
                    javaexec {
                        args = defaultArgs + [
                                '-dbSource', source,
                                '-dbTarget', target,
                                '-field', field,
                                '-ipc', ipcSec]
                        classpath = confJava['classPath']
                        main = mainClass
                    }
                }
            }
        }

        /**
         * Catch-all task to generate all IPC-class related dumps for the
         * current language & field.
         */
        task(ExtractTerms.createTaskName(lang, field, null) + '-ipc') {
            def depTasks = []
            for (ipcSec in confIPC['sections']) {
                depTasks.add(tasks[
                        ExtractTerms.createTaskName(lang, field, ipcSec)])
            }
            dependsOn depTasks
            group groupNames['extractTermsIpc']
            description "Batch sample from TermFreq dump. " +
                    "field=${field} lang=${lang} ipc=*."
        }
    }

    /**
     * Generate catch-all task for each language that will run tasks for each
     * field of that language.
     */
    task(ExtractTerms.createTaskName(lang, null, null)) {
        def depTasks = []
        for (field in confScoring['fields']) {
            depTasks.add(tasks[
                    ExtractTerms.createTaskName(lang, field, null)])
        }
        dependsOn depTasks
        group groupNames['extractTerms']
        description "Batch sample from TermFreq dump. field=* lang=${lang}."
    }

    /**
     * Generate catch-all task for each language that will run tasks for each
     * field of that language using an IPC-section filter.
     */
    task(ExtractTerms.createTaskName(lang, null, null) + "-ipc") {
        def depTasks = []
        for (field in confScoring['fields']) {
            for (ipcSec in confIPC['sections']) {
                depTasks.add(tasks[
                        ExtractTerms.createTaskName(lang, field, ipcSec)])
            }
        }
        dependsOn depTasks
        group groupNames['extractTermsIpc']
        description "Batch sample from TermFreq dump. field=* lang=${lang} " +
                "ipc=*."
    }
}

/**
 * Catch-all task that will sample terms for each language and field.
 */
task(ExtractTerms.createTaskName(null, null, null)) {
    def depTasks = []
    for (lang in confScoring['languages']) {
        depTasks.add(tasks[
                ExtractTerms.createTaskName(lang, null, null)])
    }

    description "Batch sample from TermFreq dump. field=* lang=*."
    dependsOn depTasks
    group groupNames['extractTerms']
}

/**
 * Catch-all task that will sample terms from tern-dumps for each language,
 * field and IPC-section.
 */
task(ExtractTerms.createTaskName(null, null, null) + '-ipc') {
    def depTasks = []
    for (lang in confScoring['languages']) {
        depTasks.add(tasks[
                ExtractTerms.createTaskName(lang, null, null) + '-ipc'])
    }

    description "Batch sample from TermFreq dump. field=* lang=* ipc=*."
    dependsOn depTasks
    group groupNames['extractTermsIpc']
}